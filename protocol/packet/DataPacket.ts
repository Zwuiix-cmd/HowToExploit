import 'reflect-metadata';

import {Packet} from "./Packet";

const PROPERTY_METADATA_KEY = Symbol('propertyMetadata');

function propertyMetadata(type: string) {
    return function (target: Object, propertyKey: string | symbol) {
        const properties = Reflect.getMetadata(PROPERTY_METADATA_KEY, target.constructor) || {};
        properties[propertyKey as string] = type;
        Reflect.defineMetadata(PROPERTY_METADATA_KEY, properties, target.constructor);
    };
}

export class DataPacket implements Packet {
    pid: number;
    name: string;

    constructor(name: string, pid: number) {
        this.name = name;
        this.pid = pid;
    }

    public getPid(): number
    {
        return this.pid;
    }

    public getName(): string
    {
        return this.name;
    }

    public getProperties(): { [key: string]: string } {
        return Reflect.getMetadata(PROPERTY_METADATA_KEY, this) || {};
    }
}