import {DataPacket} from "../DataPacket";
import {PacketIds} from "../PacketIds";
import {Packet} from "../Packet";
import {ServerboundPacket} from "../ServerboundPacket";
import {ClientboundPacket} from "../ClientboundPacket";

export enum TextPacketType {
    RAW = 0,
    CHAT = 1,
    TRANSLATION = 2,
    POPUP = 3,
    JUKEBOX_POPUP = 4,
    TIP = 5,
    SYSTEM = 6,
    WHISPER = 7,
    ANNOUNCEMENT = 8,
    JSON_WHISPER = 9,
    JSON = 10,
    JSON_ANNOUNCEMENT = 11,
}

export class TextPacket extends DataPacket implements ClientboundPacket, ServerboundPacket
{
    // @ts-ignore
    @propertyMetadata('TextPacketType')
    type!: TextPacketType;

    // @ts-ignore
    @propertyMetadata('boolean')
    needTranslation!: boolean;

    // @ts-ignore
    @propertyMetadata('string')
    message!: string;

    // @ts-ignore
    @propertyMetadata('string')
    xuid!: string;

    // @ts-ignore
    @propertyMetadata('string')
    platform_chat_id!: string;

    // @ts-ignore
    @propertyMetadata('string')
    filtered_message!: string;


    constructor() {
        super("Text", PacketIds.TEXT_PACKET);
    }

    public static parse(args: object): TextPacket
    {
        return new TextPacket();
    }
}